Hi Fernando,I have completed my task to create a Java program which will create the auth_timestamp value. I apologize for the delay but I can lay all the blame on Andrew :)In doing my task, I discovered that Java does not consume Public/Private Keys the same way that ruby and php do. The Java key format is not directly compatible with the other languages. All of the hard work and complexity around this issue is due to this reality. Because of this we have to create our own keys in java with the java keytool application. (keytool is part of the standard Java Development Kit.) You will also need to install OpenSSL. OpenSSL will read output from the keytool and produce the public key value that ruby wants to work with. You will upload that value to the polydata server at datadev.llli.org.The README says to use data.llli.org but until your @llli*sys*datadev iname has data permissions on the production site you should use datadev.llli.orgAttached is PolyDataClient.jar. I made a jar only because I was having trouble creating a zip and you mentioned "jar" in your last message to me. The jar format is not necessary or appropriate for actual usage. Please un-jar the file with	jar xf PolyDataClient.jarand then follow the steps in the README.txt file.When you unjar you will find these files:	GetAuthToken.class	GetAuthToken.java	SampleUsage.class	SampleUsage.java	TestKeyStore.class	TestKeyStore.java	README.txt	polydata_keys.jksThe last one, polydata_keys.jks is a java KeyStore that I created in my final test. You should rename it and make your own keystore file.I carefully tested the entire README documentation. If something does not seem to work for you it is because I have not been clear enough with my instructions. Let's work together to make it as simple as it can be.Once you've finished the README and can successfully run all the tests, you'll be ready for Steve's Next Step. (I don't recall what that is exactly.)	The next thing you might want me to do is to build a tool that composes the polydata requests. Its signature would look something like:	get_request(=mike, +supporter/email, $get/xml, @llli*fernando)and return	/=mike/(+polydata)/(+supporter/email)/($get/xml)/(@llli*fernando)If or when you think you will find this useful, let me know and I can make you a java version.