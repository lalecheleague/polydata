Java does not consume externally generated keys very well. This short sequence of steps will produce a private   key that Java likes and place the public key in the polydata address space.Summary  We'll use keytool (included in the JDK) to create a private key in file:///keystore_path.jks with the password held in -storepass  Openssl will export a public key suitable for upload to data.llli.org  We'll upload the public key to :    http://data.llli.org/server/public_keySample values for the following commands:  keystore_path: polydata_keys.jks  keystore_secret: keystore_secret_abc  key_alias: @llli*sys*datadev (use the iname as the key alias)  key_secret: key_secret_123 (keytool will ask you for this "Enter key password for <key_alias>")Steps1) Create the Keystore:> keytool -genkey -keyalg RSA -alias "<key_alias>" -keystore <keystore_path> -storepass "<keystore_secret>" -validity 360  For Example:  > keytool -genkey -keyalg RSA -alias "@llli*sys*datadev" -keystore polydata_keys.jks -storepass keystore_secret_abc -validity 360        NOTE, I hit "Enter" to use the same password for @llli*sys*datadev as for the whole keystore -- keystore_secret_abc2) Export the Certificate Signing Request  > keytool -certreq -v -alias "<key_alias>" -keystore <keystore_path> -storepass "<keystore_secret>" -file tmp_certreq.csr   For Example:  > keytool -certreq -v -alias "@llli*sys*datadev" -keystore polydata_keys.jks -storepass "keystore_secret_abc" -file tmp_certreq.csr 3) Use OpenSSL to extract and print the public key  > openssl req -days 365 -outform PEM -in tmp_certreq.csr -pubkey -noout4) Login to data.llli.org as the <alias>  http://data.llli.org/login/<key_alias>  For Example:  > http://data.llli.org/login/@llli*sys*datadev  5) Submit the public key to  http://data.llli.org/server/public_key6) Clean up after ourselves  > rm tmp_certreq.csr7) Test your Keystore  > java TestKeyStore <keystore_path> <keystore_secret> <key_alias> <key_secret>  For Example:  > java TestKeyStore polydata_keys.jks keystore_secret_abc @llli*sys*datadev keystore_secret_abc8) Test your auth token  > java -classpath .:./PolydataClient.jar SampleUsage <keystore_path> <keystore_secret> <key_alias> <key_secret>  For Example:  > java -classpath .:./PolydataClient.jar SampleUsage polydata_keys.jks keystore_secret_abc @llli*sys*datadev keystore_secret_abcCompare SampleUsage to   http://data.llli.org/guide/verify_timestamp  and   http://data.llli.org/guide/verify_encryptedFinishedThanks to   http://shib.kuleuven.be/docs/ssl_commands.shtml#keytool  http://www.openssl.org/docs/apps/req.html#  http://exampledepot.com/egs/java.security/GetKeyFromKs.html