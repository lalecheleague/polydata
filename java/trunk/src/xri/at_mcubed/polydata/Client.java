package xri.at_mcubed.polydata;import xri.at_mcubed.polydata.KeyManager;import xri.at_mcubed.polydata.Request;import java.util.Date;import java.io.FileInputStream;import java.security.KeyStore;import java.security.PublicKey;import java.security.PrivateKey;import sun.misc.BASE64Decoder;import sun.misc.BASE64Encoder;import javax.crypto.Cipher;import java.io.BufferedReader;import java.io.IOException;public class Client{	public Client() throws Exception // String[] args	{		Initialize(); // args	}	public void Initialize() throws Exception // String[] args	{	}  public String get_auth_token(PrivateKey privateKey) throws Exception  {		return encodeBASE64( encrypt( privateKey, get_secs_now() ) );  }    public String get_auth_token(PrivateKey privateKey, String timestamp) throws Exception  {		return encodeBASE64( encrypt( privateKey, timestamp ) );  }    public String get_secs_now() throws Exception  {    Date d = new Date();    return String.valueOf( d.getTime() / 1000);  }  	private byte[] encrypt(PrivateKey privateKey, String plaintext) throws Exception	{		Cipher cipher = Cipher.getInstance("RSA/ECB/PKCS1Padding");		cipher.init(Cipher.ENCRYPT_MODE, privateKey);		byte[] ciphertext = cipher.doFinal(plaintext.getBytes("UTF8"));		return ciphertext;	}	public PrivateKey get_private_key(String[] args) throws Exception	{//    try {		  KeyManager km = new KeyManager(args[0], args[1]);		  return km.get_private_key(args[2], args[3]);//    } catch (Exception e) {//      System.out.println("USAGE: get_private_key keystore_path keystore_secret key_alias key_secret");//      e.printStackTrace();//    }	}  private static String encodeBASE64(byte[] bytes)  {      BASE64Encoder b64 = new BASE64Encoder();      return b64.encode(bytes);  }  private static byte[] decodeBASE64(String text) throws Exception  {      BASE64Decoder b64 = new BASE64Decoder();      return b64.decodeBuffer(text);  }  public static void main() throws Exception //String[] args  {    Client app = new Client(); // args  }}