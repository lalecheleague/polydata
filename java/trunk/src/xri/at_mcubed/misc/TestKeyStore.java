import java.io.FileInputStream;import java.security.KeyStore;import java.security.PublicKey;import java.security.PrivateKey;import sun.misc.BASE64Decoder;import sun.misc.BASE64Encoder;import javax.crypto.Cipher;import java.io.BufferedReader;import java.io.IOException;public class TestKeyStore{	private PrivateKey privateKey;	private PublicKey publicKey;	public TestKeyStore(String[] args) throws Exception	{		Initialize(args);	}	public void Initialize(String[] args) throws Exception	{    try { //datadev_key_store.jks store_secret @llli*sys*datadev key_secret      String keystore_path = args[0];      String keystore_secret = args[1];      String alias = args[2];      String key_secret = args[3];      KeyStore keystore = KeyStore.getInstance("jks");      keystore.load(new FileInputStream(keystore_path), keystore_secret.toCharArray());      privateKey = (PrivateKey) keystore.getKey(alias, key_secret.toCharArray());      // Get certificate of public key      java.security.cert.Certificate cert = keystore.getCertificate(alias);      // Get public key      publicKey = cert.getPublicKey();    } catch (Exception e) {      e.printStackTrace();    }	}	public String encrypt(String plaintext) throws Exception	{		Cipher cipher = Cipher.getInstance("RSA/ECB/PKCS1Padding");		cipher.init(Cipher.ENCRYPT_MODE, privateKey);		byte[] ciphertext = cipher.doFinal(plaintext.getBytes("UTF8"));		return encodeBASE64(ciphertext);	}	public String decrypt(String ciphertext) throws Exception	{		Cipher cipher = Cipher.getInstance("RSA/ECB/PKCS1Padding");		cipher.init(Cipher.DECRYPT_MODE, publicKey);		byte[] plaintext = cipher.doFinal(decodeBASE64(ciphertext));		return new String(plaintext, "UTF8");	}  private static String encodeBASE64(byte[] bytes)  {      BASE64Encoder b64 = new BASE64Encoder();      return b64.encode(bytes);  }  private static byte[] decodeBASE64(String text) throws Exception  {      BASE64Decoder b64 = new BASE64Decoder();      return b64.decodeBuffer(text);  }		public static void main(String[] args) throws Exception	{		TestKeyStore app = new TestKeyStore(args);    System.out.println();		System.out.println("======== Test Key Store Validity ===========");		System.out.println("Enter a line for test encryption: ");		java.io.InputStreamReader sreader = new java.io.InputStreamReader(System.in);		java.io.BufferedReader breader = new java.io.BufferedReader(sreader);		String input = breader.readLine();		System.out.println("User Input Plaintext = " + input);    System.out.println();				System.out.println("=== Encrypting Input with Private Key ======");		String ciphertext = app.encrypt(input);		System.out.println("Ciphertext After Encryption = " + ciphertext);    System.out.println();		System.out.println("=== Decrypting Ciphertext with Public Key ==");		String decrypted_ciphertext = app.decrypt(ciphertext);		System.out.println("Decrypted Plaintext = " + decrypted_ciphertext);    System.out.println();				if (input.equals(decrypted_ciphertext))		{  		System.out.println("User input and decrypted output are equal. The key is accessible and valid.");		} else {  		System.out.println("Input and decrypted output are not equal. A problem occurred with they key or decryption.");  		System.out.println("======== Test failed. Insure the key store is available and holds a key with the submitted alias. ========");    }    System.out.println("======== Test complete =====================");    System.out.println();	}}